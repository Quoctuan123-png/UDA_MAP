const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const moment = require('moment');
const multer = require('multer');
const path = require('path');
const { poolPromise, sql } = require('../config/db1'); // ƒê·∫£m b·∫£o ƒë√∫ng ƒë∆∞·ªùng d·∫´n

// üìå C·∫•u h√¨nh `multer` ƒë·ªÉ l∆∞u ·∫£nh avatar
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/'); // Th∆∞ m·ª•c l∆∞u ·∫£nh
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname)); // ƒê·ªïi t√™n file th√†nh unique
    }
});

const upload = multer({ storage: storage });

// üìå API ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi (H·ªó tr·ª£ upload ·∫£nh)
router.post('/register', upload.single('avatar'), async (req, res) => {
    try {
        let { username, password, fullname, phone, address, birthdate, gender } = req.body;
        const avatar = req.file ? `/uploads/${req.file.filename}` : ''; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh

        // ‚úÖ Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!username || !password || !fullname || !phone || !birthdate) {
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω' });
        }

        // ‚úÖ Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
        username = username.trim().toLowerCase();
        phone = phone.trim();
        address = address ? address.trim() : '';
        gender = gender || 'Other';

        // ‚úÖ X√°c ƒë·ªãnh role d·ª±a tr√™n email
        let role = username.endsWith('@donga.edu.vn') ? 'SinhVienUda' : 'user';

        const pool = await poolPromise;

        // ‚úÖ Ki·ªÉm tra tr√πng l·∫∑p username
        const existingUser = await pool.request()
            .input('username', sql.NVarChar, username)
            .query('SELECT id FROM users WHERE username = @username');
        if (existingUser.recordset.length > 0) {
            return res.status(400).json({ error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
        }

        // ‚úÖ Ki·ªÉm tra tr√πng l·∫∑p s·ªë ƒëi·ªán tho·∫°i
        const existingPhone = await pool.request()
            .input('phone', sql.NVarChar, phone)
            .query('SELECT id FROM users WHERE phone = @phone');
        if (existingPhone.recordset.length > 0) {
            return res.status(400).json({ error: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i' });
        }

        // ‚úÖ BƒÉm m·∫≠t kh·∫©u an to√†n
        const hashedPassword = await bcrypt.hash(password, 10);

        const birthdateInput = req.body.birthdate ? req.body.birthdate.trim() : null;

        if (!birthdateInput) {
            return res.status(400).json({ error: 'Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
        }

        console.log("üìå Gi√° tr·ªã birthdate nh·∫≠n t·ª´ Postman:", birthdateInput);

        // ‚úÖ Ch·∫•p nh·∫≠n c·∫£ 'YYYY-MM-DD' v√† 'YYYY/MM/DD'
        const formattedBirthdate = moment(birthdateInput, ['YYYY-MM-DD', 'YYYY/MM/DD'], true);

        if (!formattedBirthdate.isValid()) {
            return res.status(400).json({ error: 'Ng√†y sinh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.' });
        }

        // ‚úÖ L∆∞u user v√†o database
        await pool.request()
            .input('username', sql.NVarChar, username)
            .input('password', sql.NVarChar, hashedPassword)
            .input('fullname', sql.NVarChar, fullname)
            .input('phone', sql.NVarChar, phone)
            .input('address', sql.NVarChar, address)
            .input('birthdate', sql.Date, formattedBirthdate.toDate())
            .input('gender', sql.NVarChar, gender)
            .input('avatar', sql.NVarChar, avatar)
            .input('role', sql.NVarChar, role)
            .query(`INSERT INTO users 
                    (username, password, fullname, phone, address, birthdate, gender, avatar, role, createdAt, updatedAt) 
                    VALUES (@username, @password, @fullname, @phone, @address, @birthdate, @gender, @avatar, @role, GETDATE(), GETDATE())`);

        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng', avatar });

    } catch (err) {
        console.error("‚ùå Error registering user:", err);
        res.status(500).json({ error: 'L·ªói ƒëƒÉng k√Ω ng∆∞·ªùi d√πng', details: err.message });
    }
});

// üìå API l·∫•y danh s√°ch ng∆∞·ªùi d√πng
router.get('/', async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .query('SELECT id, username, fullname, phone, address, birthdate, gender, avatar, createdAt, updatedAt, role FROM users');
        res.status(200).json(result.recordset);
    } catch (err) {
        console.error("‚ùå Error fetching users:", err);
        res.status(500).send({ error: 'Error fetching users', details: err.message });
    }
});

module.exports = router;
